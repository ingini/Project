import json
import boto3
import gzip
import pandas as pd
import numpy as np
import os
from pyarrow import Table
from pyarrow.parquet import write_table

base_dir = '/tmp'

s3_resource = boto3.client('s3', region_name='ap-northeast-2')


def lambda_handler(event, context):
    # hm-datalake-prestaging.ver01
    json_download_bucket = event['Records'][0]['s3']['bucket']['name']

    # raw/otoplug_raidea/cycle_booking/yy=2022/mm=10/dd=21/oms-otoplug-receiver-service.v2.device-cycle_20221021143735.json.gz
    json_download_key = event['Records'][0]['s3']['object']['key'].replace('%3D', '=')

    booking_otoplug_json_file = '{}/booking_otoplug.json.gz'.format(base_dir)

    s3_resource.download_file(json_download_bucket, json_download_key, booking_otoplug_json_file)

    json_array = []

    with gzip.open(booking_otoplug_json_file, 'r') as booking_otoplug_json:
        for line in booking_otoplug_json:
            j = json.loads(line)
            new_json = {}
            # subscription_id, subscription_status, right_type, subscription_type, \
            #     subscription_group_id, subscription_member_id, subscription_member_id, subscription_approved_time, subscription_end_time, \
            #         object_uuid, car_number = None

            otoplug_cycle = j['data']['cycle']
            new_json['msgdate'] = otoplug_cycle['msgdate']
            new_json['rssi'] = otoplug_cycle['rssi']
            new_json['orgLatitude'] = otoplug_cycle['orgLatitude']
            new_json['orgLongitude'] = otoplug_cycle['orgLongitude']
            new_json['latitude'] = otoplug_cycle['latitude']
            new_json['longitude'] = otoplug_cycle['longitude']
            new_json['battery'] = otoplug_cycle['battery']
            new_json['accStatus'] = otoplug_cycle['accStatus']
            new_json['tailLight'] = otoplug_cycle['tailLight']
            new_json['isTailLightSupported'] = otoplug_cycle['isTailLightSupported']
            new_json['speed'] = otoplug_cycle['speed']
            new_json['totalDrivingDistance'] = otoplug_cycle['totalDrivingDistance']
            new_json['remainingFuel1'] = otoplug_cycle['remainingFuel1']
            new_json['chargerConnectionForEV'] = otoplug_cycle['chargerConnectionForEV']
            new_json['chargeStatusForEV'] = otoplug_cycle['chargeStatusForEV']
            new_json['gpsSatelliteCount'] = otoplug_cycle['gpsSatelliteCount']
            new_json['remainingFuel2'] = otoplug_cycle['remainingFuel2']
            new_json['altitude'] = otoplug_cycle['altitude']
            new_json['gearShiftSpeedLevel'] = otoplug_cycle['gearShiftSpeedLevel']
            new_json['deviceBattery'] = otoplug_cycle['deviceBattery']
            if 'brakeState' in otoplug_cycle:
                new_json['handBrake'] = otoplug_cycle['brakeState']['handBrake']
                new_json['footBrake'] = otoplug_cycle['brakeState']['footBrake']
            else:
                new_json['handBrake'] = ''
                new_json['footBrake'] = ''


            if 'raidea_booking' in j and j['raidea_booking'] != None:
                raidea_booking = j['raidea_booking']
                new_json['booking_id'] = raidea_booking['_id']
                new_json['booking_start_dt'] = raidea_booking['bookingStartDt']
                new_json['booking_end_dt'] = raidea_booking['bookingEndDt']
                new_json['booking_user_uuid'] = raidea_booking['userUuid']
                new_json['booking_status'] = raidea_booking['bookingStatus']
                new_json['so_id'] = raidea_booking['soId']
            else:
                new_json['booking_id'] = ''
                new_json['booking_start_dt'] = 0
                new_json['booking_end_dt'] = 0
                new_json['booking_user_uuid'] = ''
                new_json['booking_status'] = ''



            if 'raidea_subscription' in j and j['raidea_subscription'] != None:
                raidea_subscription = j['raidea_subscription']
                new_json['subscription_id'] = raidea_subscription['subscriptionId']
                new_json['subscription_status'] = raidea_subscription['status']
                new_json['right_type'] = raidea_subscription['rightType']
                new_json['subscription_type'] = raidea_subscription['subscriptionType']
                new_json['so_id'] = raidea_subscription['soId']
                if 'groupId' in raidea_subscription:
                    new_json['subscription_group_id'] = raidea_subscription['groupId']
                else:
                    new_json['subscription_group_id'] = ''
                if 'memberId' in raidea_subscription:
                    new_json['subscription_member_id'] = raidea_subscription['memberId']
                else:
                    new_json['subscription_member_id'] = ''
                if 'approvedTime' in raidea_subscription:
                    new_json['subscription_approved_time'] = raidea_subscription['approvedTime']
                else:
                    new_json['subscription_approved_time'] = 0
                if 'endTime' in raidea_subscription:
                    new_json['subscription_end_time'] = raidea_subscription['endTime']
                else:
                    new_json['subscription_end_time'] = 0
            else:
                new_json['subscription_id'] = ''
                new_json['subscription_status'] = ''
                new_json['right_type'] = ''
                new_json['subscription_type'] = ''
                new_json['subscription_group_id'] = ''
                new_json['subscription_member_id'] = ''
                new_json['subscription_approved_time'] = 0
                new_json['subscription_end_time'] = 0

            if 'raidea_objects' in j and j['raidea_objects'] != None:                
                raidea_objects = j['raidea_objects']
                new_json['so_id'] = raidea_objects['soId'][0]
                new_json['object_uuid'] = raidea_objects['objectUuid']
                new_json['car_number'] = raidea_objects['carDesc']['number']
            else:
                new_json['object_uuid'] = ''
                new_json['car_number'] = ''

            
            json_array.append(new_json)

        df = pd.DataFrame(json_array)
        df['msgdate'] = df['msgdate'].astype(str)
        df['rssi'] = df['rssi'].astype(np.int8)
        df['orgLatitude'] = df['orgLatitude'].astype(np.float32)
        df['orgLongitude'] = df['orgLongitude'].astype(np.float32)
        df['latitude'] = df['latitude'].astype(np.float32)
        df['longitude'] = df['longitude'].astype(np.float32)
        df['battery'] = df['battery'].astype(np.float32)
        df['accStatus'] = df['accStatus'].astype(str)
        df['tailLight'] = df['tailLight'].astype(bool)
        df['isTailLightSupported'] = df['isTailLightSupported'].astype(bool)
        df['speed'] = df['speed'].astype(str)
        df['totalDrivingDistance'] = df['totalDrivingDistance'].astype(str)
        df['remainingFuel1'] = df['remainingFuel1'].astype(str)
        df['chargerConnectionForEV'] = df['chargerConnectionForEV'].astype(str)
        df['chargeStatusForEV'] = df['chargeStatusForEV'].astype(str)
        df['gpsSatelliteCount'] = df['gpsSatelliteCount'].astype(str)
        df['remainingFuel2'] = df['remainingFuel2'].astype(str)
        df['altitude'] = df['altitude'].astype(np.int16)
        df['gearShiftSpeedLevel'] = df['gearShiftSpeedLevel'].astype(np.int16)
        df['deviceBattery'] = df['deviceBattery'].astype(np.float32)
        df['booking_id'] = df['booking_id'].astype(str)
        df['booking_start_dt'] = df['booking_start_dt'].astype(np.int64)
        df['booking_end_dt'] = df['booking_end_dt'].astype(np.int64)
        df['booking_user_uuid'] = df['booking_user_uuid'].astype(str)
        df['booking_status'] = df['booking_status'].astype(str)
        df['subscription_id'] = df['subscription_id'].astype(str)
        df['subscription_status'] = df['subscription_status'].astype(str)
        df['right_type'] = df['right_type'].astype(str)
        df['subscription_type'] = df['subscription_type'].astype(str)
        df['subscription_group_id'] = df['subscription_group_id'].astype(str)
        df['subscription_member_id'] = df['subscription_member_id'].astype(str)
        df['subscription_approved_time'] = df['subscription_approved_time'].astype(str)
        df['subscription_end_time'] = df['subscription_end_time'].astype(str)
        df['object_uuid'] = df['object_uuid'].astype(str)        
        df['car_number'] = df['car_number'].astype(str)

        print(df)

        table = Table.from_pandas(df)          
        otoplug_cycle_with_bookings_parquet_file = '{}/booking_otoplug.parquet'.format(base_dir)
        yy = json_download_key.split('/')[3]
        mm = json_download_key.split('/')[4]
        dd = json_download_key.split('/')[5]
        
        parquet_upload_bucket = 'hm-datalake-staging.ver01'
        parquet_upload_key = 'otoplug_raidea/otoplug_merge_raidea/{}/{}/{}/{}'.format(yy,mm,dd, os.path.basename(json_download_key).replace('json.gz','parquet'))   
        write_table(table, otoplug_cycle_with_bookings_parquet_file)

        s3_resource.upload_file(otoplug_cycle_with_bookings_parquet_file, parquet_upload_bucket, parquet_upload_key)

    return {
        'statusCode': 200,
        'body': json.dumps('success')
    }

if __name__ == '__main__':
    lambda_handler({
  "Records": [
    {
      "s3": {
        "bucket": {
          "name": "hm-datalake-prestaging.ver01"
        },
        "object": {
          "key": "raw/otoplug_raidea/cycle_booking/yy=2022/mm=10/dd=21/oms-otoplug-receiver-service.v2.device-cycle_20221021143735.json.gz"
        }
      }
    }
  ]
}, None)
    